# -*- coding: utf-8 -*-
"""cataract_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Mbd8RsK4Vk476f7zrm5QZ_Ex7gLba2Hn
"""

import numpy as np
import cv2
import os
import pandas as pd
from random import sample
!pip install scikit-plot
import seaborn as sns
import matplotlib.pyplot as plt
from scikitplot.metrics import plot_confusion_matrix as plt_con_mat

from keras.utils.np_utils import to_categorical
from sklearn.model_selection import train_test_split

from tensorflow.keras.applications.vgg19 import VGG19
from tensorflow.keras.models import Model, Sequential
from tensorflow.keras.layers import Conv2D, Dense, Dropout, MaxPooling2D, Flatten
from keras.utils import plot_model

path = "/content/drive/MyDrive/Ocular Disease Recognition/Dataset"
df = pd.read_csv(os.path.join(path, "full_df.csv"))
df.head()

file_names = []
labels = []

for text, label, file_name in zip(df["Left-Diagnostic Keywords"], df["C"], df["Left-Fundus"]):

    if(("cataract" in text) and (label == 1)):
        file_names.append(file_name)
        labels.append(1)

    elif(("normal fundus" in text) and (label == 0)):
        file_names.append(file_name)
        labels.append(0)

for text, label, file_name in zip(df["Right-Diagnostic Keywords"], df["C"], df["Right-Fundus"]):

    if(("cataract" in text) and (label == 1)):
        file_names.append(file_name)
        labels.append(1)

    elif(("normal fundus" in text) and (label == 0)):
        file_names.append(file_name)
        labels.append(0)

print(len(file_names), len(labels))

plt.bar([0,1], [len([i for i in labels if i == 1]), len([i for i in labels if i == 0])], color = ['b', 'g'])
plt.xticks([0, 1], ['Cataract', 'Normal'])
plt.show()

ROW = 224
COL = 224

image_data = []
for idx, image_name in enumerate(file_names):

    img = cv2.imread(os.path.join(path,"preprocessed_images",image_name))
    try:
        img = cv2.resize(img, (ROW, COL))
        image_data.append(img)
    except:
        del labels[idx]

image_data = np.array(image_data)
print(image_data.shape)

temp = []
for idx, label in enumerate(labels):
    if label == 0:
        temp.append(idx)

temp = sample(temp, len([label for label in labels if label == 1]))

X_data = []
y_data = []

for idx in temp:
    X_data.append(image_data[idx])
    y_data.append(labels[idx])

temp = []
for idx, label in enumerate(labels):
    if label == 1:
        temp.append(idx)

for idx in temp:
    X_data.append(image_data[idx])
    y_data.append(labels[idx])

X_data = np.array(X_data)

y_data = np.array(y_data)
y_data = np.expand_dims(y_data, axis = -1)
y_data = to_categorical(y_data)

print(X_data.shape, y_data.shape)

X_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size=0.2, shuffle = True, random_state = 1)

print(X_train.shape, y_train.shape)
print(X_test.shape, y_test.shape)

vgg = VGG19(weights = "imagenet", include_top = False, input_shape=(ROW, COL, 3))
for layer in vgg.layers:
    layer.trainable = False

model = Sequential()
model.add(vgg)
model.add(Flatten())
model.add(Dense(64, activation = 'relu'))
model.add(Dense(2,activation = "softmax"))

model.summary()

plot_model(model, show_shapes=True, show_layer_names=True)

model.compile(optimizer = 'adam',
              loss = 'categorical_crossentropy',
              metrics=['accuracy', 'Precision', 'Recall'])

history = model.fit(X_train, y_train,
                    validation_data = (X_test, y_test),
                    epochs = 15,
                    batch_size = 64)

import seaborn as sns
import matplotlib.pyplot as plt

sns.set()
fig, axes = plt.subplots(1, 2, figsize=(12, 4))

sns.lineplot(x=history.epoch, y=history.history['accuracy'], ax=axes[0], label='train')
sns.lineplot(x=history.epoch, y=history.history['val_accuracy'], ax=axes[0], label='validation')
axes[0].set_title('Accuracy')

sns.lineplot(x=history.epoch, y=history.history['loss'], ax=axes[1], label='train')
sns.lineplot(x=history.epoch, y=history.history['val_loss'], ax=axes[1], label='validation')
axes[1].set_title('Loss')

fig.tight_layout()

#plt.savefig('epoch_history.png')
plt.show()

preds = model.predict(X_test)
y_true = np.argmax(to_categorical(y_test), axis=1)

#plt_con_mat(to_categorical(y_test), preds, figsize=(10,10))
#plt.show()

import tensorflow as tf
model.save('/content/drive/MyDrive/Colab Notebboks/model.h5')